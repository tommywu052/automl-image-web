{"version":3,"sources":["generalutility.ts","LoadingProgressDialog.tsx","ImagePreviewDialog.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["stringIsBlank","str","test","LoadingProgressDialog","props","msg","className","title","ImagePreviewDialog","onClick","closeCallback","src","url","alt","Hosts","App","useState","LoadingFlag","setLoadingFlag","StepIndex","setStepIndex","SubscriptionValue","setSubscriptionValue","ResourceGroupValue","setResourceGroupValue","WorkspaceNameValue","setWorkspaceNameValue","ClusterNameValue","setClusterNameValue","ExperimentNameValue","setExperimentNameValue","DataSets_PreviewImageFlag","setDataSets_PreviewImageFlag","DataSets_DownloadURL","setDataSets_DownloadURL","DataSets_PreviewImageURL","setDataSets_PreviewImageURL","DataSets_ConvertToJSONLURL","setDataSets_ConvertToJSONLURL","Upload_LocalTargetURL","setUpload_LocalTargetURL","Upload_CloudTargetPath","setUpload_CloudTargetPath","Upload_TrainingDatasetName","setUpload_TrainingDatasetName","Upload_ValidationDatasetName","setUpload_ValidationDatasetName","AutoML_TaskType","setAutoML_TaskType","AutoML_ModelChoice","setAutoML_ModelChoice","ExecLog","setExecLog","ExecFlag","setExecFlag","value","onChange","e","target","type","placeholder","toast","error","axios","post","workspacename","subscriptionid","resourcegroup","then","v","result","data","Msg","info","catch","ClusterName","ExperimentName","URL","LocalTargetURL","CloudTargetPath","TrainingDatasetName","ValidationDatasetName","valid","TaskType","ModelChoice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce67b44d.chunk.js","sourcesContent":["export function getTimeString(): string {\r\n    let timeNow = new Date();\r\n    let isoTimeString = timeNow.toISOString().replace(/T/, ' ').replace(/\\..+/, '');\r\n    return 'UTC: ' + isoTimeString\r\n}\r\n\r\nexport function toNumber(str: string) {\r\n    let tempstr = String(str).trim();\r\n    return !tempstr ? NaN : Number(tempstr);\r\n}\r\n\r\nexport function stringIsBlank(str: string | undefined) {\r\n    return (!str || /^\\s*$/.test(str));\r\n}","import \"./loadingprogressdialog.css\";\r\nimport { stringIsBlank } from './generalutility';\r\nexport default function LoadingProgressDialog(props: { title?: string, msg?: string } = { msg: '' }) {\r\n  return (\r\n    <div className=\"fixed top-0 left-0 right-0 bottom-0 w-full h-screen z-50 overflow-hidden bg-gray-700 opacity-90 flex flex-col items-center justify-center\">\r\n      <div className=\"bg-black w-2/12 h-1/4 border-2 rounded-xl flex flex-col items-center justify-center\">\r\n        <div className=\"loader ease-linear rounded-full border-4 border-t-4 border-gray-200 h-12 w-12 mb-4\"></div>\r\n        <h2 className=\"text-center text-white text-xl font-semibold\">\r\n          {stringIsBlank(props.title) ? 'Loading...' : props.title}\r\n        </h2>\r\n        <p className=\"w-10/12 text-center text-white\">{props.msg}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export default function ImagePreviewDialog(props: { url: string, title: string, closeCallback: () => void }) {\r\n  return (\r\n    <div className=\"fixed top-0 left-0 right-0 bottom-0 w-full h-screen z-50 overflow-hidden bg-gray-700 opacity-90 flex flex-col items-center justify-center\">\r\n      <div className=\"bg-black w-auto h-auto border-2 rounded-xl flex flex-col items-center justify-center\">\r\n        <div className=\"p-2\">\r\n          <div className=\"w-full flex relative pb-1\">\r\n            <div className=\"pt-1\">\r\n              <span className=\"text-white align-middle\">{props.title}</span>\r\n            </div>\r\n            <div className=\"ml-auto\">\r\n              <button\r\n                className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\r\n                onClick={props.closeCallback}>\r\n                X\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <img className=\"rounded-md\" src={props.url} alt=\"\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport { ExecResponse } from './Contract';\nimport { stringIsBlank } from './generalutility';\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport LoadingProgressDialog from \"./LoadingProgressDialog\";\nimport ImagePreviewDialog from './ImagePreviewDialog';\n\nconst Hosts = 'http://127.0.0.1:8080';\n\nfunction App() {\n  // loading\n  const [LoadingFlag, setLoadingFlag] = useState(false);\n  // Status\n  const [StepIndex, setStepIndex] = useState(0);\n  // Workspace Setup\n  const [SubscriptionValue, setSubscriptionValue] = useState(\"\");\n  const [ResourceGroupValue, setResourceGroupValue] = useState(\"\");\n  const [WorkspaceNameValue, setWorkspaceNameValue] = useState(\"\");\n  // Compute target setup\n  const [ClusterNameValue, setClusterNameValue] = useState(\"gpu-cluster-nc6\");\n  // Experiment Setup\n  const [ExperimentNameValue, setExperimentNameValue] = useState(\"automl-image-testing\");\n  // DataSets\n  const [DataSets_PreviewImageFlag, setDataSets_PreviewImageFlag] = useState(false);\n  const [DataSets_DownloadURL, setDataSets_DownloadURL] = useState(\"https://cvbp-secondary.z19.web.core.windows.net/datasets/object_detection/odFridgeObjectsMask.zip\");\n  const [DataSets_PreviewImageURL, setDataSets_PreviewImageURL] = useState(\"/odFridgeObjectsMask/images/31.jpg\");\n  const [DataSets_ConvertToJSONLURL, setDataSets_ConvertToJSONLURL] = useState(\"odFridgeObjectsMask/\");\n  // Upload To DataStore\n  const [Upload_LocalTargetURL, setUpload_LocalTargetURL] = useState('odFridgeObjectsMask');\n  const [Upload_CloudTargetPath, setUpload_CloudTargetPath] = useState('odFridgeObjectsMask');\n  const [Upload_TrainingDatasetName, setUpload_TrainingDatasetName] = useState('odFridgeObjectsMaskTrainingDataset');\n  const [Upload_ValidationDatasetName, setUpload_ValidationDatasetName] = useState('odFridgeObjectsMaskValidationDataset');\n  // AutoML Task\n  const [AutoML_TaskType, setAutoML_TaskType] = useState('image-instance-segmentation');\n  const [AutoML_ModelChoice, setAutoML_ModelChoice] = useState('maskrcnn_resnet50_fpn');\n  // let loginit: string[] = [];\n  const [ExecLog, setExecLog] = useState('');\n  const [ExecFlag, setExecFlag] = useState(false);\n\n  const FuncWorkspaceSetup = () => {\n    setLoadingFlag(true);\n\n    if (stringIsBlank(SubscriptionValue)) {\n      toast.error('Invalid Subscription Id.');\n      setLoadingFlag(false);\n    }\n    else if (stringIsBlank(ResourceGroupValue)) {\n      toast.error('Invalid Resource Group.');\n      setLoadingFlag(false);\n    }\n    else if (stringIsBlank(WorkspaceNameValue)) {\n      toast.error('Invalid Workspace Name.');\n      setLoadingFlag(false);\n    }\n    else {\n      axios\n        .post(Hosts + \"/workspacesetup\", {\n          workspacename: WorkspaceNameValue,\n          subscriptionid: SubscriptionValue, //SubscriptionValue\n          resourcegroup: ResourceGroupValue,\n        })\n        .then((v) => {\n          // console.log(v);\n          let result = v.data as ExecResponse;\n          setExecLog(result.ExecFlag ? result.Msg : 'Error:\\n' + result.Msg);\n          setExecFlag(result.ExecFlag);\n          setLoadingFlag(false);\n          result.ExecFlag ? toast.info('Completed.') : toast.error('Error!');\n\n          setStepIndex(result.ExecFlag ? 1 : 0);\n          // setStepIndex(1);\n        })\n        .catch((e) => {\n          setLoadingFlag(false);\n        });\n    }\n  };\n  const FuncComputeTargetSetup = () => {\n    setLoadingFlag(true);\n\n    if (stringIsBlank(ClusterNameValue)) {\n      toast.error('Invalid Cluster Name.');\n      setLoadingFlag(false);\n    }\n    else {\n      axios\n        .post(Hosts + \"/computetargetsetup\", {\n          ClusterName: ClusterNameValue\n        })\n        .then((v) => {\n          // console.log(v);\n          let result = v.data as ExecResponse;\n          setExecLog(result.ExecFlag ? result.Msg : 'Error:\\n' + result.Msg);\n          setExecFlag(result.ExecFlag);\n          setLoadingFlag(false);\n          result.ExecFlag ? toast.info('Completed.') : toast.error('Error!');\n\n          setStepIndex(result.ExecFlag ? 2 : 1);\n          // setStepIndex(2);\n        }).catch((e) => {\n          setLoadingFlag(false);\n        });\n    }\n  }\n  const FuncExperimentSetup = () => {\n    setLoadingFlag(true);\n\n    if (stringIsBlank(ExperimentNameValue)) {\n      toast.error('Invalid Experiment Name.');\n      setLoadingFlag(false);\n    }\n    else {\n      axios\n        .post(Hosts + \"/experimentsetup\", {\n          ExperimentName: ExperimentNameValue\n        })\n        .then((v) => {\n          // console.log(v);\n          let result = v.data as ExecResponse;\n          setExecLog(result.ExecFlag ? result.Msg : 'Error:\\n' + result.Msg);\n          setExecFlag(result.ExecFlag);\n          setLoadingFlag(false);\n          result.ExecFlag ? toast.info('Completed.') : toast.error('Error!');\n\n          setStepIndex(result.ExecFlag ? 3 : 2);\n          // setStepIndex(3);\n        }).catch((e) => {\n          setLoadingFlag(false);\n        });\n    }\n  }\n  const FuncDownloadDataSets = () => {\n    setLoadingFlag(true);\n\n    if (stringIsBlank(DataSets_DownloadURL)) {\n      toast.error('Invalid download URL.');\n      setLoadingFlag(false);\n    }\n    else {\n      axios\n        .post(Hosts + \"/downloaddatasets\", {\n          URL: DataSets_DownloadURL\n        })\n        .then((v) => {\n          // console.log(v);\n          let result = v.data as ExecResponse;\n          setExecLog(result.ExecFlag ? result.Msg : 'Error:\\n' + result.Msg);\n          setExecFlag(result.ExecFlag);\n          setLoadingFlag(false);\n          result.ExecFlag ? toast.info('Completed.') : toast.error('Error!');\n        }).catch((e) => {\n          setLoadingFlag(false);\n        });\n    }\n  }\n  const FuncConvertToJSONL = () => {\n    setLoadingFlag(true);\n\n    if (stringIsBlank(DataSets_ConvertToJSONLURL)) {\n      toast.error('Invalid ConvertToJSONLURL');\n      setLoadingFlag(false);\n    }\n    else {\n      axios\n        .post(Hosts + \"/converttojsonl\", {\n          URL: DataSets_ConvertToJSONLURL\n        })\n        .then((v) => {\n          // console.log(v);\n          let result = v.data as ExecResponse;\n          setExecLog(result.ExecFlag ? result.Msg : 'Error:\\n' + result.Msg);\n          setExecFlag(result.ExecFlag);\n          setLoadingFlag(false);\n          result.ExecFlag ? toast.info('Completed.') : toast.error('Error!');\n        }).catch((e) => {\n          setLoadingFlag(false);\n        });\n    }\n  }\n  const FuncUploadDataSetsToDataStore = () => {\n    setLoadingFlag(true);\n\n    if (stringIsBlank(Upload_LocalTargetURL)) {\n      toast.error('Invalid Local Target URL.');\n      setLoadingFlag(false);\n    }\n    else if (stringIsBlank(Upload_CloudTargetPath)) {\n      toast.error('Invalid Cloud Target Path.');\n      setLoadingFlag(false);\n    }\n    else if (stringIsBlank(Upload_TrainingDatasetName)) {\n      toast.error('Invalid Training Dataset Name.');\n      setLoadingFlag(false);\n    }\n    else if (stringIsBlank(Upload_ValidationDatasetName)) {\n      toast.error('Invalid Validation Dataset Name.');\n      setLoadingFlag(false);\n    }\n    else {\n      axios\n        .post(Hosts + \"/uploadjsonlimagetodatastore\", {\n          LocalTargetURL: Upload_LocalTargetURL,\n          CloudTargetPath: Upload_CloudTargetPath,\n          TrainingDatasetName: Upload_TrainingDatasetName,\n          ValidationDatasetName: Upload_ValidationDatasetName\n        })\n        .then((v) => {\n          // console.log(v);\n          let result = v.data as ExecResponse;\n          setExecLog(result.ExecFlag ? result.Msg : 'Error:\\n' + result.Msg);\n          setExecFlag(result.ExecFlag);\n          setLoadingFlag(false);\n          result.ExecFlag ? toast.info('Completed.') : toast.error('Error!');\n        }).catch((e) => {\n          setLoadingFlag(false);\n        });\n    }\n  }\n  const FuncSubmitTrainingTask = () => {\n    setLoadingFlag(true);\n\n    if (stringIsBlank(AutoML_TaskType)) {\n      toast.error('Invalid Task Type');\n      setLoadingFlag(false);\n    }\n    else if (stringIsBlank(AutoML_ModelChoice)) {\n      toast.error('Invalid Model Choice');\n      setLoadingFlag(false);\n    }\n    else {\n      let valid = false;\n      if (AutoML_TaskType === 'image-classification' || AutoML_TaskType === 'image-multi-labeling') {\n        if (AutoML_ModelChoice === 'resnet18' ||\n          AutoML_ModelChoice === 'resnet34' ||\n          AutoML_ModelChoice === 'resnet50' ||\n          AutoML_ModelChoice === 'mobilenetv2' ||\n          AutoML_ModelChoice === 'seresnext') {\n          valid = true;\n        }\n      }\n      else if (AutoML_TaskType === 'image-object-detection') {\n        if (AutoML_ModelChoice === 'yolov5' ||\n          AutoML_ModelChoice === 'fasterrcnn_resnet50_fpn' ||\n          AutoML_ModelChoice === 'fasterrcnn_resnet34_fpn' ||\n          AutoML_ModelChoice === 'fasterrcnn_resnet18_fpn' ||\n          AutoML_ModelChoice === 'retinanet_resnet50_fpn') {\n          valid = true;\n        }\n      }\n      else if (AutoML_TaskType === 'image-instance-segmentation' && AutoML_ModelChoice === 'maskrcnn_resnet50_fpn') {\n        valid = true;\n      }\n      else {\n        toast.error('Invalid TaskType and ModelChoice');\n        setLoadingFlag(false);\n      }\n\n      if (valid) {\n        axios\n          .post(Hosts + \"/submitautomltraining\", {\n            TaskType: AutoML_TaskType,\n            ModelChoice: AutoML_ModelChoice\n          })\n          .then((v) => {\n            // console.log(v);\n            let result = v.data as ExecResponse;\n            setExecLog(result.ExecFlag ? result.Msg : 'Error:\\n' + result.Msg);\n            setExecFlag(result.ExecFlag);\n            setLoadingFlag(false);\n            result.ExecFlag ? toast.info('Completed.') : toast.error('Error!');\n          }).catch((e) => {\n            setLoadingFlag(false);\n          });\n      }\n      else {\n        toast.error('TaskType and ModelChoice Invalid. The categories should be the same.');\n        setLoadingFlag(false);\n      }\n    }\n  }\n  const FuncCheckSubmitStatus = () => {\n    setLoadingFlag(true);\n    axios\n      .post(Hosts + \"/getsubmitstatus\", {})\n      .then((v) => {\n        // console.log(v);\n        let result = v.data as ExecResponse;\n        setExecLog(result.ExecFlag ? result.Msg : 'Error:\\n' + result.Msg);\n        setExecFlag(result.ExecFlag);\n        setLoadingFlag(false);\n        result.ExecFlag ? toast.info('Completed.') : toast.error('Error!');\n      }).catch((e) => {\n        setLoadingFlag(false);\n      });\n  }\n\n  return (\n    <div className=\"h-screen\">\n      {\n        DataSets_PreviewImageFlag &&\n        <ImagePreviewDialog\n          url={Hosts + '/datasets/' + DataSets_PreviewImageURL}\n          title={DataSets_PreviewImageURL}\n          closeCallback={() => setDataSets_PreviewImageFlag(false)} />\n      }\n      <ToastContainer />\n      {\n        LoadingFlag && <LoadingProgressDialog title={'Running...'} />\n      }\n      <div className=\"m-2\">\n        <h1 className=\"text-white font-bold text-2xl\">Experiment AutoML</h1>\n      </div>\n      <div className=\"flex h-auto\">\n        <div className=\"w-1/2 h-full bg-gray-400 p-2 m-1 rounded-md\">\n          <div className=\"w-full h-auto p-2 mt-2 bg-yellow-100 rounded-md\">\n            <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-md text-xl font-medium bg-green-300 text-black\">\n              1. Workspace setup\n            </span>\n            <div>\n              <div className=\"flex m-3\">\n                <label className=\"font-medium text-black\">\n                  Subscription id:\n                </label>\n                <div className=\"ml-2 w-1/2\">\n                  {\n                    StepIndex > 0 ?\n                      SubscriptionValue :\n                      <input\n                        value={SubscriptionValue}\n                        onChange={(e) => setSubscriptionValue(e.target.value)}\n                        type=\"text\"\n                        className=\"shadow-sm border-2 border-gray-400 rounded-md w-full\"\n                        placeholder=\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n                      />\n                  }\n                </div>\n              </div>\n              <div className=\"flex m-3\">\n                <label className=\"font-medium text-black\">\n                  Resource Group:\n                </label>\n                <div className=\"ml-2 w-1/2\">\n                  {\n                    StepIndex > 0 ?\n                      ResourceGroupValue :\n                      <input\n                        value={ResourceGroupValue}\n                        onChange={(e) => setResourceGroupValue(e.target.value)}\n                        type=\"text\"\n                        className=\"shadow-sm border-2 border-gray-400 rounded-md w-full\"\n                        placeholder=\"resource_group\"\n                      />\n                  }\n                </div>\n              </div>\n              <div className=\"flex m-3\">\n                <label className=\"font-medium text-black\">\n                  Workspace Name:\n                </label>\n                <div className=\"ml-2 w-1/2\">\n                  {\n                    StepIndex > 0 ?\n                      WorkspaceNameValue :\n                      <input\n                        value={WorkspaceNameValue}\n                        onChange={(e) => setWorkspaceNameValue(e.target.value)}\n                        type=\"text\"\n                        className=\"shadow-sm border-2 border-gray-400 rounded-md w-full\"\n                        placeholder=\"workspace_name\"\n                      />\n                  }\n                </div>\n                <div className=\"ml-auto\">\n                  {\n                    StepIndex === 0 && <button\n                      className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n                      onClick={FuncWorkspaceSetup}\n                    >\n                      Setup and Login\n                  </button>\n                  }\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"w-full h-auto p-2 mt-2 bg-yellow-100 rounded-md\">\n            <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-md text-xl font-medium bg-green-300 text-black\">\n              2. Compute target setup\n            </span>\n            <div>\n              <div className=\"flex m-3\">\n                <label className=\"font-medium text-black\">\n                  Cluster_name:\n                </label>\n                <div className=\"ml-2 w-1/2\">\n                  {\n                    StepIndex > 1 ?\n                      ClusterNameValue :\n                      <input\n                        value={ClusterNameValue}\n                        onChange={(e) => setClusterNameValue(e.target.value)}\n                        type=\"text\"\n                        className=\"shadow-sm border-2 border-gray-400 rounded-md w-full\"\n                        placeholder=\"cluster_name\"\n                      />\n                  }\n                </div>\n                <div className=\"ml-auto\">\n                  {\n                    StepIndex === 1 &&\n                    <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n                      onClick={FuncComputeTargetSetup}>\n                      setup\n                    </button>\n                  }\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"w-full h-auto p-2 mt-2 bg-yellow-100 rounded-md\">\n            <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-md text-xl font-medium bg-green-300 text-black\">\n              3. Experiment Setup\n            </span>\n            <div>\n              <div className=\"flex m-3\">\n                <label className=\"font-medium text-black\">\n                  Experiment Name:\n                </label>\n                <div className=\"ml-2 w-1/2\">\n                  {\n                    StepIndex > 2 ?\n                      ExperimentNameValue :\n                      <input\n                        value={ExperimentNameValue}\n                        onChange={(e) => setExperimentNameValue(e.target.value)}\n                        type=\"text\"\n                        className=\"shadow-sm border-2 border-gray-400 rounded-md w-full\"\n                        placeholder=\"experiment_name\"\n                      />\n                  }\n                </div>\n                <div className=\"ml-auto\">\n                  {\n                    StepIndex === 2 &&\n                    <button\n                      className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n                      onClick={FuncExperimentSetup}>\n                      setup\n                    </button>\n                  }\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"w-full h-auto p-2 mt-2 bg-yellow-100 rounded-md\">\n            <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-md text-xl font-medium bg-yellow-600 text-black\">\n              4. Dataset Operation\n            </span>\n            <div>\n              <div className=\"flex m-3\">\n                <label className=\"font-medium text-black\">\n                  Download URL:\n                </label>\n                <div className=\"ml-2 w-3/5\">\n                  <input\n                    value={DataSets_DownloadURL}\n                    onChange={(e) => setDataSets_DownloadURL(e.target.value)}\n                    type=\"text\"\n                    className=\"shadow-sm border-2 border-gray-400 rounded-md w-full\"\n                    placeholder=\"url\"\n                  />\n                </div>\n                <div className=\"ml-auto\">\n                  {\n                    StepIndex >= 3 &&\n                    <button\n                      className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n                      onClick={FuncDownloadDataSets}>\n                      Download\n                    </button>\n                  }\n                </div>\n              </div>\n              <div className=\"flex m-3\">\n                <label className=\"font-medium text-black\">\n                  Preview Image:\n                </label>\n                <div className=\"ml-2 w-3/5\">\n                  <input\n                    value={DataSets_PreviewImageURL}\n                    onChange={(e) => setDataSets_PreviewImageURL(e.target.value)}\n                    type=\"text\"\n                    className=\"shadow-sm border-2 border-gray-400 rounded-md w-full\"\n                    placeholder=\"url\"\n                  />\n                </div>\n                <div className=\"ml-auto\">\n                  {\n                    StepIndex >= 3 &&\n                    <button\n                      className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n                      onClick={() => { setDataSets_PreviewImageFlag(true) }}>\n                      Preview\n                  </button>\n                  }\n                </div>\n              </div>\n              <div className=\"flex m-3\">\n                <label className=\"font-medium text-black\">\n                  Convert To JSONL:\n                </label>\n                <div className=\"ml-2 w-3/5\">\n                  <input\n                    value={DataSets_ConvertToJSONLURL}\n                    onChange={(e) => setDataSets_ConvertToJSONLURL(e.target.value)}\n                    type=\"text\"\n                    className=\"shadow-sm border-2 border-gray-400 rounded-md w-full\"\n                    placeholder=\"url\"\n                  />\n                </div>\n                <div className=\"ml-auto\">\n                  {\n                    StepIndex >= 3 &&\n                    <button\n                      className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n                      onClick={FuncConvertToJSONL}>\n                      Convert\n                    </button>\n                  }\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"w-full h-auto p-2 mt-2 bg-yellow-100 rounded-md\">\n            <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-md text-xl font-medium bg-yellow-600 text-black\">\n              5. Upload JSONL file and images to Datastore\n            </span>\n            <div>\n              <div className=\"flex m-3\">\n                <label className=\"font-medium text-black\">\n                  Local Target URL:\n                </label>\n                <div className=\"ml-2 w-3/5\">\n                  <input\n                    value={Upload_LocalTargetURL}\n                    onChange={(e) => setUpload_LocalTargetURL(e.target.value)}\n                    type=\"text\"\n                    className=\"shadow-sm border-2 border-gray-400 rounded-md w-full\"\n                    placeholder=\"url\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex m-3\">\n                <label className=\"font-medium text-black\">\n                  Cloud Target Path:\n                </label>\n                <div className=\"ml-2 w-3/5\">\n                  <input\n                    value={Upload_CloudTargetPath}\n                    onChange={(e) => setUpload_CloudTargetPath(e.target.value)}\n                    type=\"text\"\n                    className=\"shadow-sm border-2 border-gray-400 rounded-md w-full\"\n                    placeholder=\"url\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex m-3\">\n                <label className=\"font-medium text-black\">\n                  Training Dataset Name:\n                </label>\n                <div className=\"ml-2 w-3/5\">\n                  <input\n                    value={Upload_TrainingDatasetName}\n                    onChange={(e) => setUpload_TrainingDatasetName(e.target.value)}\n                    type=\"text\"\n                    className=\"shadow-sm border-2 border-gray-400 rounded-md w-full\"\n                    placeholder=\"url\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex m-3\">\n                <label className=\"font-medium text-black\">\n                  Validation Dataset Name:\n                </label>\n                <div className=\"ml-2 w-3/5\">\n                  <input\n                    value={Upload_ValidationDatasetName}\n                    onChange={(e) => setUpload_ValidationDatasetName(e.target.value)}\n                    type=\"text\"\n                    className=\"shadow-sm border-2 border-gray-400 rounded-md w-full\"\n                    placeholder=\"url\"\n                  />\n                </div>\n                <div className=\"ml-auto\">\n                  {\n                    StepIndex >= 3 &&\n                    <button\n                      className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n                      onClick={FuncUploadDataSetsToDataStore}>\n                      Upload\n                    </button>\n                  }\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"w-full h-auto p-2 mt-2 bg-yellow-100 rounded-md\">\n            <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-md text-xl font-medium bg-pink-500 text-black\">\n              6. AutoML run for image tasks\n            </span>\n            <div>\n              <div className=\"flex m-3\">\n                <label className=\"font-medium text-black\">\n                  Task Type:\n                </label>\n                <div className=\"ml-2 w-3/5\">\n                  <select\n                    className=\"shadow-sm border-2 border-gray-400 rounded-md w-full\"\n                    value={AutoML_TaskType}\n                    onChange={(e) => setAutoML_TaskType(e.target.value)}>\n                    <option value={'image-classification'}>image-classification</option>\n                    <option value={'image-multi-labeling'}>image-multi-labeling</option>\n                    <option value={'image-object-detection'}>image-object-detection</option>\n                    <option value={'image-instance-segmentation'}>image-instance-segmentation</option>\n                  </select>\n                </div>\n              </div>\n              <div className=\"flex m-3\">\n                <label className=\"font-medium text-black\">\n                  Model Choice:\n                </label>\n                <div className=\"ml-2 w-3/5\">\n                  <select\n                    className=\"shadow-sm border-2 border-gray-400 rounded-md w-full\"\n                    value={AutoML_ModelChoice}\n                    onChange={(e) => setAutoML_ModelChoice(e.target.value)}>\n                    <option value={'resnet18'}>Image Classification: resnet18</option>\n                    <option value={'resnet34'}>Image Classification: resnet34</option>\n                    <option value={'resnet50'}>Image Classification: resnet50</option>\n                    <option value={'mobilenetv2'}>Image Classification: mobilenetv2</option>\n                    <option value={'seresnext'}>Image Classification: seresnext</option>\n                    <option value={'yolov5'}>Object Detection (OD): yolov5</option>\n                    <option value={'fasterrcnn_resnet50_fpn'}>Object Detection (OD): fasterrcnn_resnet50_fpn</option>\n                    <option value={'fasterrcnn_resnet34_fpn'}>Object Detection (OD): fasterrcnn_resnet34_fpn</option>\n                    <option value={'fasterrcnn_resnet18_fpn'}>Object Detection (OD): fasterrcnn_resnet18_fpn</option>\n                    <option value={'retinanet_resnet50_fpn'}>Object Detection (OD): retinanet_resnet50_fpn</option>\n                    <option value={'maskrcnn_resnet50_fpn'}>Instance segmentation (IS): maskrcnn_resnet50_fpn</option>\n                  </select>\n                </div>\n                <div className=\"ml-auto\">\n                  {\n                    StepIndex >= 3 &&\n                    <button\n                      className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n                      onClick={FuncSubmitTrainingTask}>\n                      Submit\n                    </button>\n                  }\n                  {\n                    StepIndex >= 3 &&\n                    <button\n                      className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-1\"\n                      onClick={FuncCheckSubmitStatus}>\n                      Check Status\n                    </button>\n                  }\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"w-1/2 h-auto bg-black p-2 m-1 rounded-md\">\n          <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-md text-xl font-medium bg-white text-black\">\n            AutoML Log\n          </span>\n          <div className=\"text-white mt-2 h-5/6 rounded-md\">\n            {\n              ExecFlag ?\n                <textarea className=\"w-full h-full rounded-md text-xl font-bold text-black p-3\" value={ExecLog}></textarea> :\n                <textarea className=\"w-full h-full rounded-md text-xl font-bold text-red-600 p-3\" value={ExecLog}></textarea>\n            }\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}